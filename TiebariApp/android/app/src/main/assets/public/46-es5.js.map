{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-radio_2-ios.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses, h as hostContext } from './theme-18cbe2cc.js';\nimport { f as findCheckedOption, w as watchForOptions } from './watch-options-2af96011.js';\n\nconst Radio = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.onClick = () => {\n            if (this.checked) {\n                this.ionDeselect.emit();\n            }\n            else {\n                this.checked = true;\n            }\n        };\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    }\n    colorChanged() {\n        this.emitStyle();\n    }\n    checkedChanged(isChecked) {\n        if (isChecked) {\n            this.ionSelect.emit({\n                checked: true,\n                value: this.value\n            });\n        }\n        this.emitStyle();\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    componentWillLoad() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    render() {\n        const { inputId, disabled, checked, color, el } = this;\n        const mode = getIonMode(this);\n        const labelId = inputId + '-lbl';\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"colorChanged\"],\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:8px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\"; }\n};\nlet radioButtonIds = 0;\n\nconst RadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.onSelect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                this.value = selectedRadio.value;\n            }\n        };\n        this.onDeselect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                selectedRadio.checked = false;\n                this.value = undefined;\n            }\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n    }\n    valueChanged(value) {\n        this.updateRadios();\n        this.ionChange.emit({ value });\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const el = this.el;\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\n        if (header) {\n            const label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n        if (this.value === undefined) {\n            const radio = findCheckedOption(el, 'ion-radio');\n            if (radio !== undefined) {\n                await radio.componentOnReady();\n                if (this.value === undefined) {\n                    this.value = radio.value;\n                }\n            }\n        }\n        this.mutationO = watchForOptions(el, 'ion-radio', newOption => {\n            if (newOption !== undefined) {\n                newOption.componentOnReady().then(() => {\n                    this.value = newOption.value;\n                });\n            }\n            else {\n                this.updateRadios();\n            }\n        });\n        this.updateRadios();\n    }\n    disconnectedCallback() {\n        if (this.mutationO) {\n            this.mutationO.disconnect();\n            this.mutationO = undefined;\n        }\n    }\n    async updateRadios() {\n        /**\n         * Make sure we get all radios first\n         * so values are up to date prior\n         * to caching the radio group value\n         */\n        const radios = await this.getRadios();\n        const { value } = this;\n        let hasChecked = false;\n        // Walk the DOM in reverse order, since the last selected one wins!\n        for (const radio of radios) {\n            if (!hasChecked && radio.value === value) {\n                // correct value for this radio\n                // but this radio isn't checked yet\n                // and we haven't found a checked yet\n                hasChecked = true;\n                radio.checked = true;\n            }\n            else {\n                // this radio doesn't have the correct value\n                // or the radio group has been already checked\n                radio.checked = false;\n            }\n        }\n        // Reset value if\n        if (!hasChecked) {\n            this.value = undefined;\n        }\n    }\n    getRadios() {\n        return Promise.all(Array\n            .from(this.el.querySelectorAll('ion-radio'))\n            .map(r => r.componentOnReady()));\n    }\n    render() {\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onIonSelect: this.onSelect, onIonDeselect: this.allowEmptySelection ? this.onDeselect : undefined, class: getIonMode(this) }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet radioGroupIds = 0;\n\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"],"sourceRoot":"webpack:///","file":"46-es5.js"}