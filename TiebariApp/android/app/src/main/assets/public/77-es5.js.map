{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\n\nconst CELL_TYPE_ITEM = 'item';\r\nconst CELL_TYPE_HEADER = 'header';\r\nconst CELL_TYPE_FOOTER = 'footer';\r\nconst NODE_CHANGE_NONE = 0;\r\nconst NODE_CHANGE_POSITION = 1;\r\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\r\nconst updateVDom = (dom, heightIndex, cells, range) => {\r\n    // reset dom\r\n    for (const node of dom) {\r\n        node.change = NODE_CHANGE_NONE;\r\n        node.d = true;\r\n    }\r\n    // try to match into exisiting dom\r\n    const toMutate = [];\r\n    const end = range.offset + range.length;\r\n    for (let i = range.offset; i < end; i++) {\r\n        const cell = cells[i];\r\n        const node = dom.find(n => n.d && n.cell === cell);\r\n        if (node) {\r\n            const top = heightIndex[i];\r\n            if (top !== node.top) {\r\n                node.top = top;\r\n                node.change = NODE_CHANGE_POSITION;\r\n            }\r\n            node.d = false;\r\n        }\r\n        else {\r\n            toMutate.push(cell);\r\n        }\r\n    }\r\n    // needs to append\r\n    const pool = dom.filter(n => n.d);\r\n    for (const cell of toMutate) {\r\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\r\n        const index = cell.i;\r\n        if (node) {\r\n            node.d = false;\r\n            node.change = NODE_CHANGE_CELL;\r\n            node.cell = cell;\r\n            node.top = heightIndex[index];\r\n        }\r\n        else {\r\n            dom.push({\r\n                d: false,\r\n                cell,\r\n                visible: true,\r\n                change: NODE_CHANGE_CELL,\r\n                top: heightIndex[index],\r\n            });\r\n        }\r\n    }\r\n    dom\r\n        .filter(n => n.d && n.top !== -9999)\r\n        .forEach(n => {\r\n        n.change = NODE_CHANGE_POSITION;\r\n        n.top = -9999;\r\n    });\r\n};\r\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\r\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\r\n    const childrenNu = children.length;\r\n    let child;\r\n    for (let i = 0; i < dom.length; i++) {\r\n        const node = dom[i];\r\n        const cell = node.cell;\r\n        // the cell change, the content must be updated\r\n        if (node.change === NODE_CHANGE_CELL) {\r\n            if (i < childrenNu) {\r\n                child = children[i];\r\n                nodeRender(child, cell, i);\r\n            }\r\n            else {\r\n                const newChild = createNode(el, cell.type);\r\n                child = nodeRender(newChild, cell, i) || newChild;\r\n                child.classList.add('virtual-item');\r\n                el.appendChild(child);\r\n            }\r\n            child['$ionCell'] = cell;\r\n        }\r\n        else {\r\n            child = children[i];\r\n        }\r\n        // only update position when it changes\r\n        if (node.change !== NODE_CHANGE_NONE) {\r\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\r\n        }\r\n        // update visibility\r\n        const visible = cell.visible;\r\n        if (node.visible !== visible) {\r\n            if (visible) {\r\n                child.classList.remove('virtual-loading');\r\n            }\r\n            else {\r\n                child.classList.add('virtual-loading');\r\n            }\r\n            node.visible = visible;\r\n        }\r\n        // dynamic height\r\n        if (cell.reads > 0) {\r\n            updateCellHeight(cell, child);\r\n            cell.reads--;\r\n        }\r\n    }\r\n};\r\nconst createNode = (el, type) => {\r\n    const template = getTemplate(el, type);\r\n    if (template && el.ownerDocument) {\r\n        return el.ownerDocument.importNode(template.content, true).children[0];\r\n    }\r\n    return null;\r\n};\r\nconst getTemplate = (el, type) => {\r\n    switch (type) {\r\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n    }\r\n};\r\nconst getViewport = (scrollTop, vierportHeight, margin) => {\r\n    return {\r\n        top: Math.max(scrollTop - margin, 0),\r\n        bottom: scrollTop + vierportHeight + margin\r\n    };\r\n};\r\nconst getRange = (heightIndex, viewport, buffer) => {\r\n    const topPos = viewport.top;\r\n    const bottomPos = viewport.bottom;\r\n    // find top index\r\n    let i = 0;\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] > topPos) {\r\n            break;\r\n        }\r\n    }\r\n    const offset = Math.max(i - buffer - 1, 0);\r\n    // find bottom index\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] >= bottomPos) {\r\n            break;\r\n        }\r\n    }\r\n    const end = Math.min(i + buffer, heightIndex.length);\r\n    const length = end - offset;\r\n    return { offset, length };\r\n};\r\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\r\n    const end = range.offset + range.length;\r\n    return (dirtyIndex <= end ||\r\n        currentRange.offset !== range.offset ||\r\n        currentRange.length !== range.length);\r\n};\r\nconst findCellIndex = (cells, index) => {\r\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n    if (index === 0) {\r\n        return 0;\r\n    }\r\n    else if (index === max + 1) {\r\n        return cells.length;\r\n    }\r\n    else {\r\n        return cells.findIndex(c => c.index === index);\r\n    }\r\n};\r\nconst inplaceUpdate = (dst, src, offset) => {\r\n    if (offset === 0 && src.length >= dst.length) {\r\n        return src;\r\n    }\r\n    for (let i = 0; i < src.length; i++) {\r\n        dst[i + offset] = src[i];\r\n    }\r\n    return dst;\r\n};\r\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\r\n    const cells = [];\r\n    const end = len + offset;\r\n    for (let i = offset; i < end; i++) {\r\n        const item = items[i];\r\n        if (headerFn) {\r\n            const value = headerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_HEADER,\r\n                    value,\r\n                    index: i,\r\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n                    reads: headerHeight ? 0 : MIN_READS,\r\n                    visible: !!headerHeight,\r\n                });\r\n            }\r\n        }\r\n        cells.push({\r\n            i: j++,\r\n            type: CELL_TYPE_ITEM,\r\n            value: item,\r\n            index: i,\r\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n            reads: itemHeight ? 0 : MIN_READS,\r\n            visible: !!itemHeight,\r\n        });\r\n        if (footerFn) {\r\n            const value = footerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_FOOTER,\r\n                    value,\r\n                    index: i,\r\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n                    reads: footerHeight ? 0 : MIN_READS,\r\n                    visible: !!footerHeight,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n};\r\nconst calcHeightIndex = (buf, cells, index) => {\r\n    let acum = buf[index];\r\n    for (let i = index; i < buf.length; i++) {\r\n        buf[i] = acum;\r\n        acum += cells[i].height;\r\n    }\r\n    return acum;\r\n};\r\nconst resizeBuffer = (buf, len) => {\r\n    if (!buf) {\r\n        return new Uint32Array(len);\r\n    }\r\n    if (buf.length === len) {\r\n        return buf;\r\n    }\r\n    else if (len > buf.length) {\r\n        const newBuf = new Uint32Array(len);\r\n        newBuf.set(buf);\r\n        return newBuf;\r\n    }\r\n    else {\r\n        return buf.subarray(0, len);\r\n    }\r\n};\r\nconst positionForIndex = (index, cells, heightIndex) => {\r\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\r\n    if (cell) {\r\n        return heightIndex[cell.i];\r\n    }\r\n    return -1;\r\n};\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            this.el.forceUpdate();\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n    static get style() { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":"webpack:///","file":"77-es5.js"}