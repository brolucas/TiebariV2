{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { e as debounce } from './helpers-46f4a262.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\n\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\n\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign(Object.assign({}, a), b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"55-es5.js"}